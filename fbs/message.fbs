namespace encrypto.motion.communication;

enum MessageType : ubyte {
  kHelloMessage,
  kOutputMessage,
  kTerminationMessage,
  kSynchronizationMessage,
  kBaseROtMessageSender,
  kBaseROtMessageReceiver,
  kOtExtensionReceiverMasks,
  kOtExtensionReceiverCorrections,
  kOtExtensionSender,
  kBmrInputGate0,                    // publishes the public value held by the input owner (lambda ^ input)
  kBmrInputGate1,                   // publishes the keys on wire under the public value to all parties
  kBmrAndGate,                      // publishes garbled tables corresponding to a gate (n_wires * n_simd * 3 rows)
  kSharedBitsMask,
  kSharedBitsReconstruct,
  kGarbledCircuitSetup,
  // #simd concatenated tuples of 8-byte garbled rows of form
  // [row0 || row1 || row2]_simd=0 || [row0 || row1 || row2]_simd=1 || ...
  // Compressed garbled control bits for determining which linear combination
  // of the garbled rows needs to be used for producing the result of the AND gate.
  // These are concatenated 5-bit codewords: [cw_0] || ... || [cw_last].
  kGarbledCircuitGarbledTables,
  // concatenated permutation bits
  // [p_simd0 || ... || p_simdlast]_wire0 || [p_simd0 || ... || p_simdlast]_wirelast
  kGarbledCircuitOutput,
  // #wires * #simd labels of form
  // [l_simd0 || ... || l_simdlast]_wire0 || [l_simd0 || ... || l_simdlast]_wirelast
  kGarbledCircuitInput,
  kKK13OtExtensionReceiverMasks,
  kKK13OtExtensionReceiverCorrections,
  kKK13OtExtensionSender,
  kKK13OtExtensionMaskSeed,
  kAstraInputGate,
  kAstraOutputGate,
  kAstraSetupMultiplyGate,
  kAstraOnlineMultiplyGate,
  kAstraSetupDotProductGate,
  kAstraOnlineDotProductGate,
  kAstraSetupMatrixBitAGate,
  kAstraOnlineMatrixBitAGate,
  kAstraSetupBitAGate,
  kAstraOnlineMsbGate,
  kAstraSetupMsbGate,
  kAstraOnlineBitAGate,
  kBooleanAstraInputGate,
  kBooleanAstraOutputGate,
  kBooleanAstraSetupAndGate,
  kBooleanAstraOnlineAndGate,
  kBooleanAstraSetupDotProductGate,
  kBooleanAstraOnlineDotProductGate,
  kAuxiliatorInputGate,
  kAuxiliatorOutputGate,
  kAuxiliatorSetupBitAGate,
  kAuxiliatorOnlineBitAGate,
  kAuxiliatorOnlineMsbGate,
  kAuxiliatorSetupMultiplyGate,
  kAuxiliatorOnlineMultiplyGate,
  kAuxiliatorVerifier,
  kBooleanAuxiliatorInputGate,
  kBooleanAuxiliatorOutputGate,
  kBooleanAuxiliatorSetupAndGate,
  kBooleanAuxiliatorOnlineAndGate,
  kSwiftInputGate,
  kSwiftOutputGate,
  kSwiftSetupMultiplyGate,
  kSwiftOnlineMultiplyGate,
  kSwiftBitASetupD,
  kSwiftBitASetupF,
  kSwiftBitAOnline,
  kSwiftMsb,
  kSwiftVerifierSemiMult,
  kSwiftVerifierR,
  kSwiftVerifierV,
  kSwiftVerifierCheckZero,
  kSwiftVerifier,
  kSwiftTruncationR,
  kSwiftTruncationRd,
  kSociumSetupMultiplyGate,
  kSociumOnlineMultiplyGate,
  kSociumVerifierSemiMult,
  kSociumVerifierV,
  kSociumVerifierCheckZero,
  kSociumInputGate,
  kSociumOutputGate,
  kSociumBitASetupD,
  kSociumBitASetupF,
  kSociumBitAOnline,
  kSociumMsb,
  kGateExecutorSynchronizeSetup,
  // add new message types here
}

// TODO: implement message splitting if the size of a single message goes over 2^32 - 1 bits

// General message interface that contains a header and a payload, where payload is some raw flatbuffers::Struct.
// This is generally needed because flatbuffers doesn't provide a functionality to transfer serialized binary structures
// of variable size and type over the network, so we need to manually ensure that the other party knows how many bytes
// it has to read for this message and what type of message it is. Thus, general idea: send uint32-bit byte-length
// of the message and the message directly afterwards.
//
//  +----------------------------------------------+
//  | Header (8 bits)    | Body (0--2^32 - 1 bits) |
//  +--------------------+-------------------------+
//  |                    |                         |
//  | uint8 message_type |     uint8[] payload     |
//  |                    |                         |
//  +--------------------+-------------------------+
//
table Message {
  message_type:MessageType;
  // If this id is not used - set to default, then it's likely not stored at all.
  message_id:uint64 = 0;
  payload:[ubyte];
}

root_type Message;
